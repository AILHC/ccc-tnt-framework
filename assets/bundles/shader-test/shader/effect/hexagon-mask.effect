// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.


CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
    precision highp float;
    #include <builtin/internal/embedded-alpha>
    #include <builtin/internal/alpha-test>
    #include <builtin/uniforms/cc-global>

    in vec4 color;

    
    #if USE_TEXTURE
        in vec2 uv0;
    #pragma builtin(local)
        layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
    #endif

    // from https://iquilezles.org/articles/smin
    // polynomial smooth min (k = 0.1);
    float smin( float a, float b, float k )
    {
        float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
        return mix( b, a, h ) - k*h*(1.0-h);
    }

    float smax(float a, float b, float k)
    {
        return (-smin(-a,-b,k));
    }

    float df(vec2 pos)
    {
      vec2 q = abs(pos);
      return smax(smax((q.x * 0.866025 +pos.y*0.5),q.y,.05),smax((q.x * 0.866025 -pos.y*0.5),q.y,.05),.05);
    }


    vec4 frag () {

        vec4 o = vec4(1.0, 1.0, 1.0, 1.0);

        #if USE_TEXTURE
            o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
            #if IS_GRAY
                float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
                o.r = o.g = o.b = gray;
            #endif
        #endif
        

        float Closure = 0.8;
        vec3 col = vec3(1.);
        vec2 position = uv0 - vec2(.5,.5);
        float dist = 1. - df(position *2.3);

        // float shape = smoothstep(.2,0., .1 - clamp(Closure * 3. - 2.,0.,1.) * 1.2);
        // shape *= smoothstep(0.,.01,dist);
        float shape = smoothstep(0.,.01,dist);
        o = o * color * vec4(col * shape,shape);

        ALPHA_TEST(o);
        return o;
    }
}% 
