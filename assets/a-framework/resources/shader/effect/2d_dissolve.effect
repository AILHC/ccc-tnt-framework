
// 高斯模糊 算法参考 https://zhuanlan.zhihu.com/p/85210935

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        dissolve: { value: white, editor: { tooltip: "噪声图" }}
        dissolveThreshold: { value: 0.5, editor: { range: [0, 1, 0.01], slide: true }}
        edgeColor: { value: [0.9,0.6,0.3,1], editor: { type: color,tooltip: "溶解边缘颜色" }}
}%

CCProgram vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

      pos = cc_matViewProj * pos;

    uv0 = a_texCoord;
    color = a_color;

    return pos;
  }
}%

CCProgram fs %{
  precision highp float;
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;

    uniform sampler2D dissolve;
  #endif

  uniform DissolveParams {
    vec4 edgeColor;
    float dissolveThreshold;
  };


  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);


    float value = 1.0;
    #if USE_TEXTURE
      vec4 dissolveMap = texture(dissolve, uv0);
      value *= dissolveMap.r;
    #endif

    // 丢弃小于溶解阈值的像素
    if(value < dissolveThreshold){
      discard;
    }


    #if USE_TEXTURE   
        o *= texture(cc_spriteTexture, uv0);        
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif
    
    o *= color;
    ALPHA_TEST(o);

    // 修改 溶解边缘颜色
    if(value < dissolveThreshold + 0.05){
      o = vec4(edgeColor.r,edgeColor.g,edgeColor.b,edgeColor.a * o.a);
    }


    return o;
  }
}%
